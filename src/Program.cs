using System.Text.Json;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.Payments;
using Telegram.Bot.Types.ReplyMarkups;

var builder = WebApplication.CreateBuilder(args);

// Env vars
var botToken = Environment.GetEnvironmentVariable("Telegram__BotToken");
var payToken = Environment.GetEnvironmentVariable("Telegram__PaymentProviderToken");
var currency = Environment.GetEnvironmentVariable("Telegram__Currency") ?? "EUR";

if (string.IsNullOrWhiteSpace(botToken))
{
    throw new InvalidOperationException("Telegram__BotToken is not set.");
}

var bot = new TelegramBotClient(botToken);
var app = builder.Build();

// Healthcheck
app.MapGet("/health", () => Results.Ok("ok"));

// Webhook endpoint: Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Å—é–¥–∞ Update
// Healthcheck
app.MapGet("/health", () => Results.Ok("ok"));

// –ù–∞–¥—ë–∂–Ω—ã–π –≤–µ–±—Ö—É–∫: –≤—Å–µ–≥–¥–∞ 200, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
app.MapPost($"/bot/{botToken}", async (HttpRequest req) =>
{
    try
    {
        using var sr = new StreamReader(req.Body);
        var json = await sr.ReadToEndAsync();

        var update = System.Text.Json.JsonSerializer.Deserialize<Telegram.Bot.Types.Update>(
            json,
            new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        if (update != null)
        {
            await HandleUpdateAsync(bot, update);
        }
        else
        {
            Console.WriteLine("Webhook: null update");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Webhook error: {ex}");
        // –ù–ò–ß–ï–ì–û –Ω–µ –∫–∏–¥–∞–µ–º –Ω–∞—Ä—É–∂—É
    }

    // –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ 200, –∏–Ω–∞—á–µ Telegram –±—É–¥–µ—Ç —Ä–µ—Ç—Ä–∞–∏—Ç—å –∏ –∫–æ–ø–∏—Ç—å pending_update_count
    return Results.Ok();
});


app.Run();

// ================= Handlers =================
static async Task HandleUpdateAsync(ITelegramBotClient bot, Update update)
{
    switch (update.Type)
    {
        case UpdateType.Message:
            if (update.Message!.Type == MessageType.Text)
                await OnText(bot, update.Message!);
            break;

        case UpdateType.PreCheckoutQuery:
            // –ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ –≤—Å—ë –æ–∫
            await bot.AnswerPreCheckoutQueryAsync(update.PreCheckoutQuery!.Id);
            break;

        default:
            // no-op
            break;
    }
}

static async Task OnText(ITelegramBotClient bot, Telegram.Bot.Types.Message msg)
{
    var chatId = msg.Chat.Id;
    var text = msg.Text ?? string.Empty;

    if (text == "/start")
    {
        await bot.SendTextMessageAsync(chatId,
            "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–∞—Ñ–µ-–±–æ—Ç ‚òïÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            replyMarkup: MainMenu());
        return;
    }

    if (text == "üìã –ú–µ–Ω—é")
    {
        var lines = GetMenu().Select(m => $"‚Ä¢ {m.Name} ‚Äî {FormatPrice(m.PriceCents)}");
        await bot.SendTextMessageAsync(chatId, "üìã –ú–µ–Ω—é:\n" + string.Join("\n", lines), replyMarkup: MenuKeyboard());
        return;
    }

    if (text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å")
    {
        await SendSampleInvoice(bot, chatId);
        return;
    }

    await bot.SendTextMessageAsync(chatId, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", replyMarkup: MainMenu());
}


static string FormatPrice(int cents) => $"{cents / 100m:F2} {Environment.GetEnvironmentVariable("Telegram__Currency") ?? "EUR"}";

static ReplyKeyboardMarkup MainMenu() => new(new[]
{
    new KeyboardButton[] { "üìã –ú–µ–Ω—é" },
    new KeyboardButton[] { "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å" }
}) { ResizeKeyboard = true };

static MenuItem[] GetMenu()=> new[]
{
    new MenuItem("–≠—Å–ø—Ä–µ—Å—Å–æ", 180),
    new MenuItem("–ö–∞–ø—É—á–∏–Ω–æ", 250),
    new MenuItem("–ß–∏–∑–∫–µ–π–∫", 420),
};

static InlineKeyboardMarkup MenuKeyboard()
{
    var rows = GetMenu().Select(m => new[]
    {
        InlineKeyboardButton.WithCallbackData($"{m.Name} ‚Äî {FormatPrice(m.PriceCents)}", $"noop:{m.Name}")
    });
    return new InlineKeyboardMarkup(rows);
}

static async Task SendSampleInvoice(ITelegramBotClient bot, long chatId)
{
    var payToken = Environment.GetEnvironmentVariable("Telegram__PaymentProviderToken");
    var currency = Environment.GetEnvironmentVariable("Telegram__Currency") ?? "EUR";

    if (string.IsNullOrWhiteSpace(payToken))
    {
        await bot.SendTextMessageAsync(chatId, "–¢–æ–∫–µ–Ω –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è Telegram__PaymentProviderToken.");
        return;
    }

    var prices = new List<LabeledPrice>
    {
        new(label: "–≠—Å–ø—Ä–µ—Å—Å–æ √ó1", amount: 180),
        new(label: "–ö–∞–ø—É—á–∏–Ω–æ √ó1", amount: 250)
    };

    await bot.SendInvoiceAsync(
        chatId: chatId,
        title: "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
        description: "–î–µ–º–æ-–∏–Ω–≤–æ–π—Å (Stripe test)",
        payload: $"order-{chatId}-{DateTimeOffset.UtcNow.ToUnixTimeSeconds()}",
        providerToken: payToken,
        currency: currency,
        prices: prices,
        needName: true,
        needPhoneNumber: false,
        needEmail: false,
        needShippingAddress: false,
        isFlexible: false
    );
}

// ============ Demo menu + invoice ============
record MenuItem(string Name, int PriceCents);