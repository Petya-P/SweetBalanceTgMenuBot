using System.Collections.Concurrent;
using Newtonsoft.Json;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.Payments;
using Telegram.Bot.Types.ReplyMarkups;

var builder = WebApplication.CreateBuilder(args);

// Env vars
var botToken = Environment.GetEnvironmentVariable("Telegram__BotToken");
var currency = Environment.GetEnvironmentVariable("Telegram__Currency") ?? "EUR";
if (string.IsNullOrWhiteSpace(botToken)) throw new InvalidOperationException("Telegram__BotToken is not set.");

var bot = new TelegramBotClient(botToken);
var app = builder.Build();

// ====== Demo menu (–µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫) ======
var MENU = new List<MenuItem>
{
    new("espresso", "–≠—Å–ø—Ä–µ—Å—Å–æ", 180),
    new("cappuccino", "–ö–∞–ø—É—á–∏–Ω–æ", 250),
    new("cheesecake", "–ß–∏–∑–∫–µ–π–∫", 420),
};
// –∫–æ—Ä–∑–∏–Ω–∞: chatId -> (code -> qty)
var Carts = new ConcurrentDictionary<long, ConcurrentDictionary<string, int>>();

// ========= Healthcheck =========
app.MapGet("/health", () => Results.Ok("ok"));

// ========= –ù–∞–¥—ë–∂–Ω—ã–π –≤–µ–±—Ö—É–∫: –≤—Å–µ–≥–¥–∞ 200 =========
app.MapPost($"/bot/{botToken}", async (HttpRequest req) =>
{
    try
    {
        using var sr = new StreamReader(req.Body);
        var json = await sr.ReadToEndAsync();
        var update = JsonConvert.DeserializeObject<Update>(json);

        if (update != null)
            await HandleUpdateAsync(bot, update, MENU, Carts, currency);
        else
            Console.WriteLine("Webhook: null update");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Webhook error: {ex}");
        // –Ω–µ —Ä–æ–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞—Ä—É–∂—É
    }
    return Results.Ok();
});

app.Run();

// ============================================
//                Handlers
// ============================================
static async Task HandleUpdateAsync(
    ITelegramBotClient bot,
    Update update,
    List<MenuItem> MENU,
    ConcurrentDictionary<long, ConcurrentDictionary<string,int>> Carts,
    string currency)
{
    switch (update.Type)
    {
        case UpdateType.Message when update.Message!.Type == MessageType.Text:
            await OnText(bot, update.Message!, MENU, Carts, currency);
            break;

        case UpdateType.CallbackQuery:
            await OnCallback(bot, update.CallbackQuery!, MENU, Carts, currency);
            break;

        case UpdateType.PreCheckoutQuery:
            // –ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ–±—ã Telegram –ø—Ä–æ–¥–æ–ª–∂–∏–ª –ø–ª–∞—Ç—ë–∂
            await bot.AnswerPreCheckoutQueryAsync(update.PreCheckoutQuery!.Id);
            break;

        case UpdateType.Message when update.Message!.SuccessfulPayment is not null:
            // –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Äî –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            var chatId = update.Message!.Chat.Id;
            Carts.TryRemove(chatId, out _);
            await bot.SendTextMessageAsync(chatId, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ. –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ä–∞–±–æ—Ç—É.");
            break;
    }
}

static async Task OnText(
    ITelegramBotClient bot,
    Message msg,
    List<MenuItem> MENU,
    ConcurrentDictionary<long, ConcurrentDictionary<string,int>> Carts,
    string currency)
{
    var chatId = msg.Chat.Id;
    var text = (msg.Text ?? string.Empty).Trim();

    // –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ –∫–Ω–æ–ø–∫–∏, –∏ slash-–∫–æ–º–∞–Ω–¥—ã
    switch (text.ToLowerInvariant())
    {
        case "/start":
            await bot.SendTextMessageAsync(chatId,
                "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–∞—Ñ–µ-–±–æ—Ç ‚òïÔ∏è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                replyMarkup: MainMenu());
            return;

        case "üìã –º–µ–Ω—é":
        case "/menu":
            await SendMenu(bot, chatId, MENU, currency);
            return;

        case "üß∫ –∫–æ—Ä–∑–∏–Ω–∞":
        case "/cart":
            await SendCart(bot, chatId, MENU, Carts, currency);
            return;

        case "üßπ –æ—á–∏—Å—Ç–∏—Ç—å":
        case "/clear":
            Carts.TryRemove(chatId, out _);
            await bot.SendTextMessageAsync(chatId, "üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", replyMarkup: MainMenu());
            return;

        case "üí≥ –æ–ø–ª–∞—Ç–∏—Ç—å":
        case "/pay":
            await SendInvoiceFromCart(bot, chatId, MENU, Carts, currency);
            return;

        default:
            await bot.SendTextMessageAsync(chatId,
                "–ù–µ –ø–æ–Ω—è–ª ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                replyMarkup: MainMenu());
            return;
    }
}

static async Task OnCallback(
    ITelegramBotClient bot,
    CallbackQuery cq,
    List<MenuItem> MENU,
    ConcurrentDictionary<long, ConcurrentDictionary<string,int>> Carts,
    string currency)
{
    var chatId = cq.Message?.Chat.Id ?? cq.From.Id;
    var data = cq.Data ?? "";

    if (data.StartsWith("add:", StringComparison.Ordinal))
    {
        var code = data[4..];
        var item = MENU.FirstOrDefault(m => m.Code == code);
        if (item is not null)
        {
            var cart = Carts.GetOrAdd(chatId, _ => new ConcurrentDictionary<string, int>());
            cart.AddOrUpdate(code, 1, (_, q) => q + 1);

            await bot.AnswerCallbackQueryAsync(cq.Id, $"–î–æ–±–∞–≤–ª–µ–Ω–æ: {item.Name}");
            // –û–±–Ω–æ–≤–∏–º –∫–æ—Ä–∑–∏–Ω—É ¬´–≤ –æ–¥–∏–Ω –∫–ª–∏–∫¬ª
            await SendCart(bot, chatId, MENU, Carts, currency, editMessageId: cq.Message?.MessageId);
            return;
        }
    }
    else if (data.StartsWith("del:", StringComparison.Ordinal))
    {
        var code = data[4..];
        if (Carts.TryGetValue(chatId, out var cart) && cart.TryGetValue(code, out var qty))
        {
            if (qty <= 1) cart.TryRemove(code, out _);
            else cart[code] = qty - 1;

            var item = MENU.FirstOrDefault(m => m.Code == code);
            await bot.AnswerCallbackQueryAsync(cq.Id, item is null ? "–£–¥–∞–ª–µ–Ω–æ" : $"–£–¥–∞–ª–µ–Ω–æ: {item.Name}");
            await SendCart(bot, chatId, MENU, Carts, currency, editMessageId: cq.Message?.MessageId);
            return;
        }
    }
    else if (data == "pay")
    {
        await SendInvoiceFromCart(bot, chatId, MENU, Carts, currency);
        await bot.AnswerCallbackQueryAsync(cq.Id);
        return;
    }
    else if (data == "menu")
    {
        await SendMenu(bot, chatId, MENU, currency, editMessageId: cq.Message?.MessageId);
        await bot.AnswerCallbackQueryAsync(cq.Id);
        return;
    }

    // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await bot.AnswerCallbackQueryAsync(cq.Id);
}

// ============================================
//               UI helpers
// ============================================
static ReplyKeyboardMarkup MainMenu() =>
    new(new[]
    {
        new KeyboardButton[] { "üìã –ú–µ–Ω—é" },
        new KeyboardButton[] { "üß∫ –ö–æ—Ä–∑–∏–Ω–∞", "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å" },
        new KeyboardButton[] { "üßπ –û—á–∏—Å—Ç–∏—Ç—å" }
    })
    { ResizeKeyboard = true };

static InlineKeyboardMarkup MenuInline(List<MenuItem> MENU, string currency)
{
    var rows = MENU.Select(m => new[]
    {
        InlineKeyboardButton.WithCallbackData($"‚ûï {m.Name} ‚Äî {FormatPrice(m.PriceCents, currency)}", $"add:{m.Code}")
    });
    return new InlineKeyboardMarkup(rows.Append(new[]
    {
        InlineKeyboardButton.WithCallbackData("üß∫ –ö–æ—Ä–∑–∏–Ω–∞", "cart"),
        InlineKeyboardButton.WithCallbackData("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "pay")
    }));
}

static InlineKeyboardMarkup CartInline(Dictionary<MenuItem,int> items, string currency)
{
    var rows = items.Select(kv => new[]
    {
        InlineKeyboardButton.WithCallbackData($"‚ûñ {kv.Key.Name} √ó {kv.Value}", $"del:{kv.Key.Code}"),
        InlineKeyboardButton.WithCallbackData($"‚ûï", $"add:{kv.Key.Code}")
    });

    var footer = new[]
    {
        InlineKeyboardButton.WithCallbackData("üìã –ú–µ–Ω—é", "menu"),
        InlineKeyboardButton.WithCallbackData("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "pay")
    };

    return new InlineKeyboardMarkup(rows.Append(footer));
}

// ============================================
//             Business helpers
// ============================================
static async Task SendMenu(
    ITelegramBotClient bot, long chatId, List<MenuItem> MENU, string currency, int? editMessageId = null)
{
    var lines = MENU.Select(m => $"‚Ä¢ {m.Name} ‚Äî {FormatPrice(m.PriceCents, currency)}");
    var text = "üìã –ú–µ–Ω—é:\n" + string.Join("\n", lines);

    if (editMessageId is int mid)
        await bot.EditMessageTextAsync(chatId, mid, text, replyMarkup: MenuInline(MENU, currency));
    else
        await bot.SendTextMessageAsync(chatId, text, replyMarkup: MenuInline(MENU, currency));
}

static async Task SendCart(
    ITelegramBotClient bot,
    long chatId,
    List<MenuItem> MENU,
    ConcurrentDictionary<long, ConcurrentDictionary<string,int>> Carts,
    string currency,
    int? editMessageId = null)
{
    var dict = BuildCartDict(chatId, MENU, Carts);
    if (dict.Count == 0)
    {
        var textEmpty = "üß∫ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –û—Ç–∫—Ä–æ–π—Ç–µ üìã –ú–µ–Ω—é –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏.";
        if (editMessageId is int mid)
            await bot.EditMessageTextAsync(chatId, mid, textEmpty, replyMarkup: MenuInline(MENU, currency));
        else
            await bot.SendTextMessageAsync(chatId, textEmpty, replyMarkup: MenuInline(MENU, currency));
        return;
    }

    var total = dict.Sum(kv => kv.Key.PriceCents * kv.Value);
    var lines = dict.Select(kv => $"‚Ä¢ {kv.Key.Name} √ó {kv.Value} = {FormatPrice(kv.Key.PriceCents * kv.Value, currency)}");
    var text = "üß∫ –ö–æ—Ä–∑–∏–Ω–∞:\n" + string.Join("\n", lines) + $"\n\n–ò—Ç–æ–≥–æ: *{FormatPrice(total, currency)}*";

    if (editMessageId is int mid2)
        await bot.EditMessageTextAsync(chatId, mid2, text, parseMode: ParseMode.Markdown, replyMarkup: CartInline(dict, currency));
    else
        await bot.SendTextMessageAsync(chatId, text, parseMode: ParseMode.Markdown, replyMarkup: CartInline(dict, currency));
}

static async Task SendInvoiceFromCart(
    ITelegramBotClient bot,
    long chatId,
    List<MenuItem> MENU,
    ConcurrentDictionary<long, ConcurrentDictionary<string,int>> Carts,
    string currency)
{
    var payToken = Environment.GetEnvironmentVariable("Telegram__PaymentProviderToken");
    if (string.IsNullOrWhiteSpace(payToken))
    {
        await bot.SendTextMessageAsync(chatId, "‚ö†Ô∏è –¢–æ–∫–µ–Ω –ø–ª–∞—Ç—ë–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Telegram__PaymentProviderToken.");
        return;
    }

    var dict = BuildCartDict(chatId, MENU, Carts);
    if (dict.Count == 0)
    {
        await bot.SendTextMessageAsync(chatId, "üß∫ –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ üìã –ú–µ–Ω—é.");
        return;
    }

    var prices = dict.Select(kv =>
        new LabeledPrice($"{kv.Key.Name} √ó {kv.Value}", kv.Key.PriceCents * kv.Value)
    ).ToList();

    var totalCents = prices.Sum(p => p.Amount);
    var title = "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞";
    var descr = $"–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {FormatPrice(totalCents, currency)}";

    await bot.SendInvoiceAsync(
        chatId: chatId,
        title: title,
        description: descr,
        payload: $"order-{chatId}-{DateTimeOffset.UtcNow.ToUnixTimeSeconds()}",
        providerToken: payToken!,
        currency: currency,
        prices: prices,
        needName: true,
        isFlexible: false
    );
}

static Dictionary<MenuItem,int> BuildCartDict(
    long chatId,
    List<MenuItem> MENU,
    ConcurrentDictionary<long, ConcurrentDictionary<string,int>> Carts)
{
    var result = new Dictionary<MenuItem, int>();
    if (!Carts.TryGetValue(chatId, out var cart)) return result;

    foreach (var kv in cart)
    {
        var item = MENU.FirstOrDefault(m => m.Code == kv.Key);
        if (item is not null && kv.Value > 0)
            result[item] = kv.Value;
    }
    return result;
}

static string FormatPrice(int cents, string currency) =>
    $"{cents / 100m:F2} {currency}";

// ======== Models ========
internal record MenuItem(string Code, string Name, int PriceCents);
